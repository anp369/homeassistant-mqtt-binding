image: python:3.8

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_REF_PROTECTED


cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - curl -sSL https://install.python-poetry.org | python3 -
  - export PATH="/root/.local/bin:$PATH"
  # make dependencies cachable
  - poetry config virtualenvs.in-project true
  - poetry install --with dev

stages:
  - test
  - build
  - upload

test:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - poetry run python -m unittest

pylint:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - poetry run pylint ha_mqtt

check_device_class:
  stage: test
  when: manual
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - poetry run python util/parse_device_classes.py

build:
  stage: build
  script:
    - poetry build
  artifacts:
    paths:
      - dist

docs:
  stage: build
  script:
    - poetry run sphinx-apidoc ha_mqtt -f -o docs/source/
    - poetry run sphinx-build -b html -W --keep-going docs/source/ docs/build/html
  artifacts:
    paths:
      - docs/build
  when: always

upload:
  stage: upload
  dependencies:
    - build
  script:
    - poetry publish -n -u __token__ -p "$CI_PYPI_TOKEN"
  only:
    - /^release_.+/

pages:
  stage: upload
  dependencies:
    - docs
  script:
    - mkdir public
    - cp -R docs/build/html public/
  artifacts:
    paths:
      - public
      - docs/build
  only:
    - /^release_.+/